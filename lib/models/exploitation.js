import mongo from '../util/mongo.js'
import * as storage from './internal/in-memory.js'

export async function getExploitationsFromPointId(idPoint) {
  return mongo.db.collection('exploitations').find({id_point: idPoint}).toArray()
}

export async function getExploitation(idExploitation) {
  return mongo.db.collection('exploitations').findOne({id_exploitation: idExploitation})
}

export async function getDocumentFromExploitationId(idExploitation) {
  return storage.exploitationsDocuments
    .filter(ed => ed.id_exploitation === idExploitation)
    .map(ed => storage.indexedDocuments[ed.id_document])
}

export async function getReglesFromExploitationId(idExploitation) {
  return storage.exploitationsRegles
    .filter(r => r.id_exploitation === idExploitation)
    .map(r => storage.indexedRegles[r.id_regle])
}

export async function getModalitesFromExploitationId(idExploitation) {
  return storage.exploitationModalites
    .filter(m => m.id_exploitation === idExploitation)
    .map(m => storage.indexedModalitesSuivis[m.id_modalite])
}

export async function getRegle(idRegle) {
  return storage.indexedRegles[idRegle]
}

export async function getDocument(idDocument) {
  return storage.indexedDocuments[idDocument]
}

export async function getDocumentFromRegleId(idRegle) {
  const regle = storage.indexedRegles[idRegle]
  return storage.indexedDocuments[regle.id_document]
}

export async function getMatchingExploitation(idPoint, {idBeneficiaire, dateValidite} = {}) {
  if (!idPoint) {
    throw new Error('idPoint is required')
  }

  const exploitationsPoint = await getExploitationsFromPointId(idPoint)

  const candidates = exploitationsPoint.filter(exploitation => {
    if (idBeneficiaire && exploitation.id_beneficiaire !== idBeneficiaire) {
      return false
    }

    if (dateValidite && (exploitation.date_debut > dateValidite || exploitation.date_fin < dateValidite)) {
      return false
    }

    return true
  })

  if (candidates.length === 0) {
    return null
  }

  if (candidates.length > 1) {
    throw new Error(`Multiple exploitations found for point ${idPoint} and beneficiaire ${idBeneficiaire}`)
  }

  return candidates[0]
}
